<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">
<!--
    H,2:1 宽:高

    W,2:1 高:宽-->
<!--
   Ratio比例

您还可以将窗口小部件的一个维度定义为另一个尺寸的比率。为此，您需要将至少一个约束尺寸设置为0dp（即MATCH_CONSTRAINT），并将该属性layout_constraintDimensionRatio设置为给定比率。 -->

<!--    [例]：指定高度为MATCH_CONSTRAINT(0dip),设置宽高为1:1-->

    <Button
        android:id="@+id/buttonA"
        android:layout_width="100dip"
        android:layout_height="0dp"
        android:text="AAAAAAAAAA"
        app:layout_constraintDimensionRatio="1:1"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent" />
   <!-- 注意:控件需要包涵约束,才可以使用比例app:layout_constraintDimensionRatio

    该比率可表示为：

    浮点数值，表示宽度和高度之间的比率app:layout_constraintDimensionRatio="1.0"
    “宽度：高度”(例如:1:1)形式的比率app:layout_constraintDimensionRatio="1:1"
    指定约束边(比率前添加字母W（用于约束宽度）或H（用于约束高度），用逗号分隔)
-->

<!--
    [例1]:控件A设置了宽度为100dip,高度设置了MATCH_CONSTRAINT（0dp)

    不指定约束边

    不指定约束边默认算法宽:高=比率(2:1),因为指定宽为100dip。所以高=宽/比率(2/1)=50dip-->

    <Button
        android:id="@+id/buttonB"
        android:layout_width="100dip"
        android:layout_height="0dip"
        app:layout_constraintTop_toBottomOf="@+id/buttonA"
        app:layout_constraintDimensionRatio="2:1"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent" />



<!--
    指定H（用于约束高度)

    指定android:layout_width="100dip"、"H,2:1"相反算法:宽:高=比率(2:1)所以高=宽/比率(2/1)=50dip-->

    <Button
        android:id="@+id/buttonC"
        android:layout_width="100dip"
        android:layout_height="0dip"
        app:layout_constraintTop_toBottomOf="@+id/buttonB"
        app:layout_constraintDimensionRatio="H,2:1"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent" />



    <!--指定W（用于约束宽度）

    指定android:layout_width"100dip"、"W,2:1"相同算法:高:宽=比率(2:1)所以高=宽*比率(2/1)=200dip-->
    <Button
        android:id="@+id/buttonD"
        android:layout_width="100dip"
        android:layout_height="0dip"
        app:layout_constraintTop_toBottomOf="@+id/buttonC"
        app:layout_constraintDimensionRatio="W,2:1"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent" />






    <!--[例2]:控件A设置了高度为100dip,宽度设置了MATCH_CONSTRAINT（0dp)

    不指定约束边

    不指定约束边默认算法宽:高=比率(2:1),因为指定高为100dip。所以宽=高*比率(2/1)=200dip-->
    <Button
        android:id="@+id/buttonE"
        android:layout_width="0dip"
        android:layout_height="100dip"
        android:layout_marginTop="100dp"
        app:layout_constraintTop_toBottomOf="@+id/buttonD"
        app:layout_constraintDimensionRatio="2:1"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent" />

    <!--指定H（用于约束高度)

    指定android:layout_height"100dip"、"H,2:1"相同算法:高:宽=比率(2:1)所以宽=高/比率(2/1)=50dip-->
    <Button
        android:id="@+id/buttonF"
        android:layout_width="0dip"
        android:layout_height="100dip"
        app:layout_constraintTop_toBottomOf="@+id/buttonE"
        app:layout_constraintDimensionRatio="H,2:1"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent" />
    <!--指定W（用于约束宽度）

    指定android:layout_height"100dip"、"W,2:1"相反算法:宽:高=比率(2:1)所以宽=高*比率(2/1)=200dip-->
    <Button
        android:id="@+id/buttonG"
        android:layout_width="0dip"
        android:layout_height="100dip"
        app:layout_constraintTop_toBottomOf="@+id/buttonF"
        app:layout_constraintDimensionRatio="W,2:1"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent" />



   <!-- [例3]:控件A设置了高度、宽度都设置了MATCH_CONSTRAINT（0dp)

    不指定约束边

    这里指定了app:layout_constraintLeft_toLeftOf="parent" 、app:layout_constraintRight_toRightOf="parent" 说明了宽度值固定,相当于指定了宽度

    不指定约束边默认算法宽:高=比率(2:1),因为指定宽为屏幕宽度。所以高=宽/比率(2/1)=屏幕宽度一半
-->

    <Button
        android:id="@+id/buttonH"
        android:layout_width="0dip"
        android:layout_height="0dip"
        android:layout_marginTop="20dp"
        app:layout_constraintTop_toBottomOf="@+id/buttonG"
        app:layout_constraintDimensionRatio="2:1"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent" />

    <!--指定H（用于约束高度)

    指定屏幕宽度、"H,2:1"相反算法:宽:高=比率(2:1)所以高=宽/比率(2/1)=屏幕宽度一半-->
    <Button
        android:id="@+id/buttonI"
        android:layout_width="0dip"
        android:layout_height="0dip"
        app:layout_constraintTop_toBottomOf="@+id/buttonH"
        app:layout_constraintDimensionRatio="H,2:1"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent" />

    <!--指定W（用于约束宽度）
    指定屏幕宽度、"W,2:1"相同算法:高:宽=比率(2:1)所以高=宽*比率(2/1)=屏幕宽度2倍-->

    <Button
        android:id="@+id/buttonJ"
        android:layout_width="0dip"
        android:layout_height="0dip"
        app:layout_constraintTop_toBottomOf="@+id/buttonI"
        app:layout_constraintDimensionRatio="W,2:1"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent" />




</androidx.constraintlayout.widget.ConstraintLayout>
